param attackTime {
    min: 0.01;
    max: 10;
    step: 0.01;
    initial: 0.01;
};

param releaseTime {
    min: 0.01;
    max: 10;
    step: 0.01;
    initial: 0.1;
};

input trigger = 0;
output curve = 0;

let currentVal = 0;
let prevTrigger = 0;
let envelopeState = 0; // 0: Idle, 1: Attack, 2: Release

let attackInc = 0;
let releaseDec = 0;

block {
    attackInc = 1 / (SR * attackTime);
    releaseDec = 1 / (SR * releaseTime);
}

process {
    // Detect rising edge and falling edge
    let risingEdge = trigger * (1 - prevTrigger);

    // If there's a rising edge, restart the attack phase irrespective of the current state
    envelopeState = 1 * risingEdge + envelopeState * (1 - risingEdge);

    let fallingEdge = prevTrigger * (1 - trigger);

    // If there's a falling edge and the envelope is in the attack phase, move to the release phase
    envelopeState = envelopeState * (1 - fallingEdge * (envelopeState == 1)) + 2 * fallingEdge * (envelopeState == 1);

    let increase = attackInc * (envelopeState == 1);
    let decrease = releaseDec * (envelopeState == 2);

    currentVal = currentVal + increase - decrease;

    // Transition from attack to release phase if currentVal reaches or exceeds 1
    envelopeState = envelopeState * (1 - (currentVal >= 1) * (envelopeState == 1)) + 2 * (currentVal >= 1) * (envelopeState == 1);

    // Reset everything if envelope completes release phase
    currentVal = currentVal * (currentVal > 0);

    prevTrigger = trigger;

    curve = currentVal;
}
