import Osc from "./test/osc-internal.mephisto";
import Osc2 from "./test/osc-internal.mephisto";
import Osc3 from "./test/osc-internal.mephisto";

import Noise from "./noise.mephisto";

import LFO from "./test/osc-internal.mephisto";

import OscVolume from "./osc-volume.mephisto";

import ADSR from "./test/adsr.mephisto";

import LowPass from "./lowpass.mephisto";
import Echo from "./echo.mephisto";

import Limiter from "./limiter.mephisto";
import Freeverb from "./freeverb.mephisto";

import Lib from "./lib.mephisto";
import Freq from "./freq.mephisto";

import Mix from "./mix.mephisto";
import Attenuator from "./attenuator.mephisto";

import Snh from "./snh.mephisto";

param osc1waveform {
    initial: 0;

    type: C_SLIDER;
    min: 0;
    max: 3;
    step: 1;

    sine: 0;
    square: 1;
    saw: 2;
    triangle: 3;
};

param osc2waveform {
    initial: 0;

    type: C_SLIDER;
    min: 0;
    max: 3;
    step: 1;

    sine: 0;
    square: 1;
    saw: 2;
    triangle: 3;
};

param osc3waveform {
    initial: 0;

    type: C_SLIDER;
    min: 0;
    max: 3;
    step: 1;

    sine: 0;
    square: 1;
    saw: 2;
    triangle: 3;
};

param lfowaveform {
    initial: 0;

    type: C_SLIDER;
    min: 0;
    max: 3;
    step: 1;

    sine: 0;
    square: 1;
    saw: 2;
    triangle: 3;
};

param lfoFrequency {
    initial: 1;
    type: C_SLIDER;
    min: 0;
    max: 20;
    step: 0.01;
};

param osc2octaveoffset {
    initial: 2;
    type: C_SLIDER;
    min: 0;
    max: 4;
    step: 1;
};

param osc2semioffset {
    initial: 0;
    type: C_SLIDER;
    min: -12;
    max: 12;
    step: 1;
};

param osc2detune {
    initial: 0;
    type: C_SLIDER;
    min: -0.1;
    max: 0.1;
    step: 0.001;
};

param osc3octaveoffset {
    initial: 2;
    type: C_SLIDER;
    min: 0;
    max: 4;
    step: 1;
};

param osc3semioffset {
    initial: 0;
    type: C_SLIDER;
    min: -12;
    max: 12;
    step: 1;
};

param osc3detune {
    initial: 0;
    type: C_SLIDER;
    min: -0.1;
    max: 0.1;
    step: 0.001;
};

param trigger {
    initial: 0;
    type: C_TRIGGER;
};

param frequency {
    initial: 440;
};

output out = 0;

input osc1 = 0;
input osc2 = 0;
input osc3 = 0;

input noise = 0;

input echo = 0;
input adsr = 0;

input karplus = 0;

output osc1freq = 440;
output osc2freq = 440;
output osc3freq = 440;

input frequencyMod = 0;

param frequencyModAmount {
    initial: 0;
    type: C_SLIDER;
    min: 0;
    max: 1;
    step: 0.01;
};

param globalgate {
    initial: 0;
    type: C_SLIDER;
    min: 0;
    max: 1;
    step: 1;
};

input osc1gainMod = 0;
input osc2detuneMod = 0;
input noiseGainMod = 0;

process {
    const freq = frequency + frequency * frequencyMod * frequencyModAmount;
    osc1freq = freq;

    let osc2detunedV = osc2detune + osc2detuneMod;

    const osc2detuned = freq * (1 + osc2detunedV);
    const osc3detuned = freq * (1 + osc3detune);

    osc2freq = Freq.semiOffset(osc2detuned * osc2octaveoffset, osc2semioffset);
    osc3freq = Freq.semiOffset(osc3detuned * osc3octaveoffset, osc3semioffset);

    let oscGainMod = 1;

    if (connected(osc1gainMod)) {
        oscGainMod = osc1gainMod;
    }

    let noiseGainModV = 1;

    if (connected(noiseGainMod)) {
        noiseGainModV = noiseGainMod;
    }

    out = (
        osc1 * OscVolume.osc1gainOut
        + osc2 * OscVolume.osc2gainOut * oscGainMod
        + osc3 * OscVolume.osc3gainOut
        + noise * OscVolume.noiseGainOut * noiseGainModV
    ) * adsr * globalgate;
}

connect {
    Osc.out -> osc1;
    Osc2.out -> osc2;
    Osc3.out -> osc3;

    Noise.out -> noise;

    osc1freq -> Osc.frequency;
    osc1waveform -> Osc.wave;

    osc2freq -> Osc2.frequency;
    osc2waveform -> Osc2.wave;

    osc3freq -> Osc3.frequency;
    osc3waveform -> Osc3.wave;

    lfowaveform -> LFO.wave;
    lfoFrequency -> LFO.frequency;

    ADSR.curve -> adsr;
    trigger -> ADSR.gate;

    trigger -> Snh.trigger;

    out -> LowPass.audioIn;
    LowPass.audioOut -> Echo.audioIn;
    Echo.audioOut -> Freeverb.audioIn;
    Freeverb.audioOut -> Limiter.audioIn;
    Limiter.audioOut -> OUTPUTS; // Or OUTPUTS[0] to send to the left channel only
}
