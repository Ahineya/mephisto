import Lib from "./lib.mephisto";

param dryWet {
    initial: 0.5;
    type: C_SLIDER;
    min: 0;
    max: 1;
    step: 0.01;
};

param decay {
    initial: 0.5;
    type: C_SLIDER;
    min: 0.2;
    max: 0.8;
    step: 0.01;
};

input audioIn = 0;
output audioOut = 0;

// Different delay buffers for the comb filters
buffer delayBuffer1[441];  // prime numbers for delay lengths to prevent overlap
buffer delayBuffer2[389];
buffer delayBuffer3[647];

process {
    let drySignal = audioIn;

    // First Comb Filter
    let delayedSignal1 = buf_read(delayBuffer1, 0);
    let combOut1 = drySignal + (delayedSignal1 * decay);
    buf_push(delayBuffer1, combOut1);

    // Second Comb Filter
    let delayedSignal2 = buf_read(delayBuffer2, 0);
    let combOut2 = drySignal + (delayedSignal2 * decay);
    tmp = buf_push(delayBuffer2, combOut2);

    // Third Comb Filter
    let delayedSignal3 = buf_read(delayBuffer3, 0);
    let combOut3 = drySignal + (delayedSignal3 * decay);
    tmp = buf_push(delayBuffer3, combOut3);

    // Mix them together, and then mix that with the dry signal based on the dry/wet parameter
    let wetSignal = (combOut1 + combOut2 + combOut3) / 3.0;
    audioOut = (drySignal * (1.0 - dryWet)) + (wetSignal * dryWet);
}

connect {
    audioOut -> OUTPUTS;
}
