import Lib from "./lib.mephisto";

input pluckTrigger = 0;
input frequency = 440;

output out = 0;

// Initialize the buffer with silence
buffer $ksBuffer[110];

let justPlucked = 0;  // A flag to indicate if a pluck was just triggered.
let lastSample = 0;  // Store the last sample of the buffer
let lastPluckState = 0; // Store the last state of the pluckTrigger

let decayFactor = 0.995;  // The decay factor of the string

let oldFrequency = 440;

let fadeInOut = 1;  // Between 0 and 1, representing the volume level.
let fadeRate = 0;  // 0.01 for fade-in, -0.01 for fade-out, 0 for stationary.


fn resize_buf() {
  buf_resize($ksBuffer, SR / frequency);
  lastSample = 0;
  return 0;
}

block {
    // Detect the rising edge of pluckTrigger.
    justPlucked = (1 - lastPluckState) * pluckTrigger;
    lastPluckState = pluckTrigger;

    // If the frequency has changed, resize the buffer. But there are no if statements in Mephisto, so we have to do this:
    if(frequency != oldFrequency, resize_buf);

    oldFrequency = frequency;

        // Detect a frequency change and start the fade-out:
        fadeRate = (frequency != oldFrequency) * -0.1; // -0.01 for fade-out.
        // Once fully faded out, start the fade-in:
        fadeRate = (fadeInOut == 0) * 0.1; // 0.01 for fade-in.
}

fn clamp(x, minv, maxv) {
    return min(max(x, minv), maxv);
}

process {
    let firstSample = buf_read($ksBuffer, 0);

    // Before calculating ksSample
    fadeInOut = fadeInOut + fadeRate;
    fadeInOut = clamp(fadeInOut, 0, 1); // Ensuring it remains between 0 and 1.

    // Calculate the Karplus-Strong sample.
    let ksSample = (firstSample + lastSample) * 0.5;

    // When plucked, generate a mix of noise and an impulse.
    let impulse = (justPlucked * 0.5) + (justPlucked * rand() * 0.5);

    // If justPlucked is 1, use the impulse, else use ksSample.
    let newSample = (justPlucked * impulse) + ((1 - justPlucked) * ksSample);

    // Apply decay
    newSample = newSample * decayFactor;
    newSample = newSample * fadeInOut;

    // Push the new sample into the buffer
    buf_push($ksBuffer, newSample);

    // Save this as the last sample
    lastSample = newSample;

    // Reset the justPlucked flag.
    justPlucked = 0;

    out = newSample;


}

connect {
    out -> OUTPUTS;
}
