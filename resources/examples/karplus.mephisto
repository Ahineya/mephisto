import Lib from "./lib.mephisto";

param pluckTrigger {
    initial: 0;
    type: C_TRIGGER;
};

param frequency {
    initial: 440;
    type: C_SLIDER;
    min: 20;
    max: 2000;
    step: 1;
};

output out = 0;

// Initialize the buffer with silence
buffer $ksBuffer[110];

let justPlucked = 0;  // A flag to indicate if a pluck was just triggered.
let lastSample = 0;  // Store the last sample of the buffer
let lastPluckState = 0; // Store the last state of the pluckTrigger

let decayFactor = 0.995;  // The decay factor of the string

let oldFrequency = 440;

resize_buf() {
  let tmp = buf_resize($ksBuffer, SR / frequency);
  return 0;
}

block {
    // Detect the rising edge of pluckTrigger.
    justPlucked = (1 - lastPluckState) * pluckTrigger;
    lastPluckState = pluckTrigger;

    // If the frequency has changed, resize the buffer. But there are no if statements in Mephisto, so we have to do this:
    let tmp = if((frequency != oldFrequency), resize_buf);
    oldFrequency = frequency;
}

process {
    let firstSample = buf_read($ksBuffer, 0);

    // Calculate the Karplus-Strong sample.
    let ksSample = (firstSample + lastSample) * 0.5;

    // When plucked, generate a mix of noise and an impulse.
    let impulse = (justPlucked * 0.5) + (justPlucked * rand() * 0.5);

    // If justPlucked is 1, use the impulse, else use ksSample.
    let newSample = (justPlucked * impulse) + ((1 - justPlucked) * ksSample);

    // Apply decay
    newSample = newSample * decayFactor;

    // Push the new sample into the buffer
    let tmp = buf_push($ksBuffer, newSample);

    // Save this as the last sample
    lastSample = newSample;

    // Reset the justPlucked flag.
    justPlucked = 0;

    out = newSample;
}

connect {
    out -> OUTPUTS;
}
